---

import { Picture } from 'astro:assets';

interface Item {
    videoId?: string;
	imgHolder?: ImageMetadata;
    title: string;
    description: string;
    plus?: string;
    costs?: string;
    time?: string;
    link?: string;
    linkText?: string;
}

export interface Props {
    items: Array<Array<Item>>;
}

const {
    items = [],
} = Astro.props;
---

<section class="courses">
    <div class="grid mx-auto md:grid-cols-2 lg:grid-cols-3 gap-16 relative">

        {
            items.map((subitems) => (
                <div class="courses__block">
                    {subitems.map(({ videoId, imgHolder, title, plus, costs, time, description, link, linkText }) => (
                        <div class="flex flex-row">
                            <div class="fade-in w-100">
                                {imgHolder && 
                                    <figure class="wrapper relative overflow-hidden">
                                        {link && (
                                        <a href={link} class="block absolute h-full w-full" rel="no-follow"><span class="sr-only">{linkText || "Kurs im Detail"}</span></a>
                                        )}
                                        <Picture src={imgHolder} layout='constrained' width={800} height={800} formats={['avif', 'webp']}  alt={title} />
                                    </figure>
                                }
                                {videoId && 
                                    <div class="wrapper">
                                        <div class="youtube" data-embed={videoId}>
                                            <div class="play-button"></div>
                                        </div>
                                    </div>
                                }
                                <h2 class="mb-2 !font-leadFont text-2xl mt-8 text-balance">{title}</h2>
                                <p set:html={description} />
                                {costs && (
                                    <h3 class="mt-3 text-xl font-bold">{costs}</h3>
                                )}
                                {time && (
                                    <p class="!font-leadFont !font-normal text-balance">{time}</p>
                                )}
                                {plus && (
                                    <p class="text-xs">{plus}</p>
                                )}
                                {link && (
                                    <a href={link} class="mt-5 no-underline inline-flex justify-center font-leadFont !text-xl font-semibold text-white border-2 border-white bg-transparent hover:text-red-300 hover:border-red-300 focus:ring-4 focus:ring-red-300 rounded-sm px-5 py-2 focus:outline-none transition duration-150 ease-out hover:ease-in">
                                        {linkText || "Kurs im Detail"}
                                    </a>
                                )}
                            </div>
                        </div>
                    ))}
                </div>
            ))
        }
    </div>
</section>

<script>
    import { observeFadeIn } from '@/scripts/scroll-observer.js';
    document.addEventListener('DOMContentLoaded', () => {
        observeFadeIn('.fade-in');
    });


    (function() {
        const youtube = document.querySelectorAll<HTMLElement>(".youtube");

        for (let i = 0; i < youtube.length; i++) {
            const videoId = youtube[i].dataset.embed;
            const altText = youtube[i].dataset.alt || "YouTube Video";
            const source = "https://img.youtube.com/vi/" + videoId + "/sddefault.jpg";
            
            const image = new Image();
            image.src = source;
            image.alt = altText;

            image.addEventListener("load", function() {
                youtube[i].appendChild(image);
            });

            youtube[i].addEventListener("click", function(this: HTMLElement) {
                const iframe = document.createElement("iframe");
                iframe.setAttribute("frameborder", "0");
                iframe.setAttribute("allowfullscreen", "");
                iframe.setAttribute("src", "https://www.youtube.com/embed/" + this.dataset.embed + "?rel=0&showinfo=0&autoplay=1");
                this.innerHTML = "";
                this.appendChild(iframe);
            });
        }
    })();
</script>