---
interface Item {
    name: string;
    value: string;
}

export interface Props {
    items?: Array<Item>;
}

const {
    items = [],
} = Astro.props;
---

<script>
    const bars = document.querySelectorAll('.meter > span');
    function handleIntersection(entries: any[]) {
        entries.map((entry) => {
            if (entry.isIntersecting) {
                setInterval(function(){
                    bars.forEach(function(bar){
                        if (bar instanceof HTMLElement) {
                            var getWidth = parseFloat(bar.dataset.progress as string);
                            for(var i = 0; i < getWidth; i++) {
                                bar.style.width = i + '%';
                            }
                        }
                    });
                }, 500);
            }
        });
    }

    const observer = new IntersectionObserver(handleIntersection);
    bars.forEach(bar => observer.observe(bar));

</script>

<section class="stats py-4 md:py-8">
    <ol class="stats__bars grid md:grid-cols-2 gap-4 list-inside">
        {
            items.map(({ name, value }) => (
                <li class="relative md:px-12">
                    <div class="mb-2 font-headingFont !text-2xl">{name}</div>
                    <div class="stats__meter meter block md:mb-10 relative rounded-sm bg-fog-300">
                        <span data-progress={value} style="width:0;" class="relative overflow-hidden block h-full"></span>
                    </div>
                </li>
            ))
        }
    </ol>
</section>


<style>
@media (min-width: 768px) { 
    .stats__bars {
        counter-reset: ctr;
    }

    .stats__bars li::before {
        color: var(--colors-fog-600);
        font-family: "leadFont", system-ui !important;
        display: block;
        content: counter(ctr, decimal-leading-zero) ".";
        counter-increment: ctr;
        font-weight: 400;
        letter-spacing: .1em;
        position: absolute;
        top: 5px;
        left: 0;
    }
}

.stats__meter {
    height: 0.4rem;
}

.stats__meter > span {
    background: rgb(2,0,36);
    background: linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(45,11,22,1) 100%);
    background: var(--colors-servette);
    box-shadow: inset 0 2px 9px rgba(255,255,255,0.3) inset 0 -2px 6px rgba(0,0,0,0.4);
    transition: width 2s ease-out;
}
</style>